int GetMid(int *a, int left, int right)
{
	int mid = left + ((right - left) >> 1);

	// left mid
	if (a[left] < a[mid])
	{
		// left mid right
		if (a[mid] < a[right])
			return mid;
		else if (a[right] < a[mid])
			return right;
		else
			return left;

	}
	else //mid left
	{
		if (a[left] < a[right])
			return left;
		else if (a[right] < a[mid])
			return mid;
		else
			return right;
	}

}


int PartSort(int *a, size_t begin, size_t end)
{
	int key = GetMid(a,begin,end);
	swap(a[key], a[end]);
	key = end;
	//--end;
	while (begin<end)
	{
		while (begin<end&&a[begin]<=a[key])//等于号防止begin和end和key三个相等时，发生死循环
		{
			++begin;
		}
		while (begin<end&&a[end]>a[key])
		{
			--end;
		}
		if (begin<end)
			swap(a[begin], a[end]);
	}
	swap(a[begin],a[key]);
	return begin;
}

void InsertSort1(int *a, int left, int right)
{
	while (left < right)
	{
		int tmp = a[left + 1];
		int i = left;
		for (; i>=0; i--)
		{
			if (a[i] > tmp)
				a[i + 1] = a[i];
			else
				break;
		}
		a[i + 1] = tmp;
		++left;
	}
}
void QuickSort(int *a, int left ,int right)
{
	//if (left >= right)
	//{
	//	return;
	//}
	if ((right - left) <= 8)
	{
		InsertSort1(a, left, right);
		return;
	}
	int ret = PartSort(a, left, right);
	

	QuickSort(a, left, ret - 1);
	QuickSort(a, ret + 1, right);

}
