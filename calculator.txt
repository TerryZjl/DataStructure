#ifndef _CAL_H_
#define _CAL_H_

#include<iostream>
#include<vector>
#include<stack>
#include<string>
using namespace std;



// 判断是操作符还是操作数
enum Cal_Type
{
	OP_NUM,
	OP_SYMBOL,
};

struct Cell
{
	Cal_Type _type; // 计算类型 
	int _value; // 值 
	struct Cell(const Cal_Type& t, const int& x)
		:_type(t)
		, _value(x)
	{ 
	};
};

class Calculator
{
public:
	Calculator(const vector<int>& exp)
		:_infix(exp)
	{
	}
	int Count()
	{
		Transition();
		stack<int> num;
		int n = _exp.size();
		for (int i = 0; i < n;i++)
		{			
			Cell cur = _exp[i];
			if (cur._type == OP_NUM)
			{
				num.push(cur._value);
			}
			else if (cur._type == OP_SYMBOL)
			{
			    int data1 = num.top();
			    num.pop();
			    int data2 = num.top();
			    num.pop();
			    int sum = 0;
			    
			    switch (cur._value)
			    {
			    case '+':{ sum = data1+data2;}
			      break;
			    case '*':{ sum = data1*data2; }
			      break;
			    case '-':{ sum = data2 - data1;}
			      break;
			    case '/':{ sum = data2 / data1; }
			      break;
			    default:
			      break;
			    }
			    num.push(sum);
			}
		}
		return num.top();
	}
protected:
	//判断是否为操作符
	bool IsTypeid(char op)
	{
		switch (op)
		{
		case '-':
		case '+':
		case '*':
		case '/':
			return true;
		default:
			return false;
			break;
		}

	}
	//确定操作符的优先级
	int Priority(char op)
	{
		switch (op)
		{
		case '-':
		case '+':
			return 1;

		case '*':
		case '/':
			return 2;

		default:
			break;
		}
	}
	//中缀转后缀
	void Transition()
	{
		stack<int> tmp;
		int n = _infix.size();
		for (int i = 0; i < n; i++)//1
		{
			if ((_infix[i] + 48) >= '0' && (_infix[i] + 48) <= '9' || _infix[i] == '.')//2
			{
				_exp.push_back(Cell({ OP_NUM, _infix[i] }));
			}
			else if (_infix[i] == '(')  //i
			{
				tmp.push(_infix[i]);
			}
			else if (_infix[i] == ')') //ii
			{
				while (tmp.top() != '(')
				{
					_exp.push_back(Cell({ OP_SYMBOL, tmp.top() }));
					tmp.pop();
				}
				tmp.pop();
			}
			else if (IsTypeid(_infix[i]))  //iii
			{
				if (tmp.empty() || Priority(_infix[i]) > Priority(tmp.top())) //(1)
				{
					tmp.push(_infix[i]);
				}
				else
				{
					while (!tmp.empty() && Priority(_infix[i]) <= Priority(tmp.top())) //(2)
					{
						_exp.push_back(Cell({ OP_SYMBOL, tmp.top() }));
						tmp.pop();
					}
					tmp.push(_infix[i]);
				}
			}
			else
			{
				cout << "输入有误" << endl;
				_exp.clear();
				return;
			}
		}
		while (!tmp.empty())
		{
			_exp.push_back(Cell({ OP_SYMBOL, tmp.top() }));
			tmp.pop();
		}
	}


protected:
	vector<int> _infix; //中缀
	vector<Cell> _exp; // 表达式 
};


int TestCalculator() 
{ 
 
	vector<int> exp = { 2, '-', 3, '*', 4, '+', 5 };
 
	Calculator cal(exp);
	int n = cal.Count();
	cout << "计算结果:" << n << endl;
	return 0; 
} 
#endif