#include<iostream>
#include<assert.h>
#include<vector>
using namespace std;

template<class T>
class Vector
{
public:
	typedef T* Iterator;  //vector结点的指针既可以进行++一类的操作
	typedef T& Ref;
	typedef T* Ptr;
	Vector()
		:_start(NULL)
		, _finish(NULL)
		, _endofstorage(NULL)
	{}
	void PushBack(const T& x)
	{
		CheckCapacity();
		Insert(_finish, x);
	}
	void PopBack()
	{
		assert(_start != _finish);
		--_finish;
	}
	T& Back()
	{
		assert(_start != _finish);
		return *(_finish-1);
	}
	T& fornt()
	{
		assert(_start != _finish);
		return *_start;
	}
	Iterator Begin()
	{
		assert(_start != _finish);
		return _start;
	}
	Iterator End()
	{
		assert(_start != _finish);
		return _finish;
	}
	void Expend()
	{
		size_t n = Size();
		size_t capacity = _endofstorage - _start;
		capacity = (capacity * 2 + 3);
		Iterator tmp = new T[capacity];
		for (size_t i = 0; i < n; i++)
		{
			tmp[i] = _start[i];
		}
		delete []_start;
		_start = tmp;
		_finish = _start + n;
		_endofstorage = _start + capacity;
	}
	void CheckCapacity()
	{
		if (_finish == _endofstorage)
		{
			Expend();
		}
	}
	Iterator Erase(Iterator it)
	{
		assert(it != End());
		if (it == (End()-1))
		{
			--_finish;
		}
		else
		{
			size_t tmp = it - _start;
			size_t n = Size();
			for (; tmp < n-1; tmp++)
			{
				it[tmp] = it[tmp + 1];
			}
			--_finish;
		}
	    return it;
	}
	
	Iterator Insert(Iterator pos, const T& x)
	{
		CheckCapacity();
		if (pos == _finish)
		{
			*_finish = x;
		}
		else
		{
			size_t tmp = pos - _start;
			size_t n = Size();
			for (; n >= tmp; n--)
			{
				_start[n] = _start[n - 1];
			}
		}
		++_finish;

		return pos;
	}

	bool Empty()
	{
		return _start == _finish;
	}
	size_t MaxSize()
	{
		return _endofstorage - _start;
	}

	size_t Size()
	{
		return _finish - _start;
	}

	~Vector()
	{
		if (_start)
		{
			delete[] _start;
			_start = NULL;
		}
	}
private:
	Iterator _start;
	Iterator _finish;;
	Iterator _endofstorage;
};

int main()
{

	//vector<int> v1;
	//v1.push_back(1);
	//v1.push_back(2);
	//v1.push_back(3);
	//v1.push_back(4);
	//vector<int>::iterator it = v1.end();
	//v1.erase(v1.end());

	Vector<int> v;
	v.PushBack(1);
	v.PushBack(2);
	v.PushBack(3);
	v.PushBack(4);
	

	Vector<int>::Iterator it = v.Begin();	
	//v.Erase(v.End()-1);
	while (it !=  v.End())
	{
		cout << *it << endl;
		if (*it == 2)
		{
			it = v.Erase(it);
		}
		else
		{
			it++;
		}
	
	}
	return 0;
}