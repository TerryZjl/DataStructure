
#include<stack>

template<class T>
class Queue
{
public:
	void Push(T val)
	{
		if (!s1.empty())
		{
			while (!s1.empty())
			{
				s2.push(s1.top());
				s1.pop();
			}
			s1.push(val);
			while (!s2.empty())
			{
				s1.push(s2.top());
				s2.pop();
			}
		}
		else
		{
			while (!s2.empty())
			{
				s1.push(s2.top());
				s2.pop();
			}
			s2.push(val);
			while (!s1.empty())
			{
				s2.push(s1.top());
				s1.pop();
			}
		}

	}

	void Pop()
	{
		if (!s1.empty())
		{
			s1.pop();
		}
		else
		{
			s2.pop();
		}
	}

	bool Empty()
	{
		if (s1.empty() && s2.empty())
			return true;
		return false;
	}


	int Size()
	{
		if (!s1.empty())
		{
			return s1.size();
		}
		else
		{
			return s2.size();
		}
	}

	T& Back()
	{
		T tmp = 0;
		if (!s1.empty())
		{
			while (!s1.empty())
			{
				s2.push(s1.top());
				s1.pop();
			}
		    tmp = s2.top();
			while (!s2.empty())
			{
				s1.push(s2.top());
				s2.pop();
			}
		}
		else
		{
			while (!s2.empty())
			{
				s1.push(s2.top());
				s2.pop();
			}
			tmp = s1.top();
			while (!s1.empty())
			{
				s2.push(s1.top());
				s1.pop();
			}
		}
		return tmp;
	}

	T& Front()
	{
		if (!s1.empty())
		{
			return s1.top();
		}
		else
		{
			return s2.top();
		}
	}
	
private:
	stack<T> s1;
	stack<T> s2;
};