#include<iostream>
#include<list>
using namespace std;


template<class T>
struct ListNode
{
	T _data;
	ListNode* _next;
	ListNode* _prev;
	ListNode(const T& x = 0)
		:_data(x)
		, _next(NULL)
		, _prev(NULL)
	{}
};


template<class T, class P, class R>
struct __ListIterator
{
	typedef __ListIterator<T, P, R> self;
	typedef ListNode<T> Node;
	Node* _it;

	__ListIterator()
	{}
	__ListIterator(Node* node) 
		:_it(node)
	{}

	__ListIterator(const Node* node)
		: _it(node)
	{}

	__ListIterator(const self& It)
	{
		_it = It._it;
	}

	~__ListIterator()
	{
		_it = NULL;
	}
	self& operator++()
	{
		_it = _it->_next;
		return *this;
	}
	//先构造了一个tmp对象，然后返回时又调用拷贝构造，构造一个临时对象，把这个临时对象返回。然后调用析构函数析构tmp对象
	//self operator++(int)
	//{
	//	self tmp(_it);
	//	_it = _it->_next;
	//	return tmp;
	//}
	
	//而这种方法不用创建临时对象。
	self& operator++(int)
	{
		Node* tmp = _it;
		_it = _it->_next;
		return self(tmp);
	}

	self& operator--()
	{
		_it = _it->_prev;
		return self(_it);
	}
	self& operator--(int)
	{
		Node* tmp = _it;
		_it = _it->_prev;
		return self(tmp);
	}

	R operator*() const
	{
		return _it->_data;
	}

	//P operator->() const
	//{
	//	return &(_it->_data);
	//}

	bool operator==(self& It)
	{
		return It._it == _it;
	}
	bool operator!=(self& It)
	{
		if (_it != It._it)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
};
template<class T>
class List
{
	typedef ListNode<T> Node;
	typedef const T* ConstPtr;
	typedef const T& ConstRef;
	typedef T* Ptr;
	typedef T& Ref;
public:
	typedef __ListIterator<T, T*, T&> Iterator;
	typedef __ListIterator<T, const T*, const T&> ConstIterator;
public:
	List()
		:_head(new Node)
	{
		_head->_next = _head;
		_head->_prev = _head;
	}
	void PushBack(const T& x)
	{
		Node* tmp = new Node(x);
		tmp->_prev = _head->_prev;
		tmp->_next = _head;
		_head->_prev = tmp;
		tmp->_prev->_next = tmp;
	}
	void PopBack()
	{
		Node* tmp = _head->_prev->_prev;
		delete _head->_prev;

		_head->_prev = tmp;
		tmp->_next = _head;
	}
	Iterator Insert(Iterator It, const T& x)
	{
		Node* tmp = It._it->_prev;
		Node* newNode = new Node(x);
		tmp->_next = newNode;
		newNode->_prev = tmp;

		newNode->_next = It._it;
		It._it->_prev = newNode;
		return newNode;
	}

	Iterator Erase(Iterator It)
	{
		Node* tmp = It._it;
		Node* Prev = tmp->_prev;
		Node* Next = tmp->_next;

		Prev->_next = Next;
		Next->_prev = Prev;
		delete tmp;
		return Iterator(Next);
	}
	//下面这种办法可以在erase之后可以直接++，加到下一个数字。
	/*Iterator Erase(Iterator It)
	{
		Node* tmp = It._it;
		Node* Prev = tmp->_prev;
		Node* Next = tmp->_next;

		Prev->_next = Next;
		Next->_prev = Prev;
		delete tmp;
		It = Prev;
		return It;
	}*/

	Ref Front()
	{
		return *(Begin());
	}
	ConstRef Front() const
	{
		return *(Begin());
	}

	Ref Back()
	{
		return *(--End());
	}

	ConstRef Back()	const
	{
		return *(--End());
	}

	ConstIterator Begin(int) const
	{
		return ConstIterator(_head->_next);
	}
	ConstIterator End(int) const
	{
		return ConstIterator(_head);
	}
	Iterator Begin()
	{
		return _head->_next;
	}
	Iterator End()
	{
		return _head;
	}
private:
	Node* _head;
};

struct AA
{
	int _data;
	AA(const int& x)
	{
		_data = x;
	}
};

int main()
{
	//list<int> s;
	//s.push_back(1);
	//s.push_back(2);
	//s.push_back(3);
	//s.push_back(4);
	//s.push_back(5);
	//list<int>::iterator it = s.begin();
	//while (it != s.end())
	//{
	//	if (*it == 3)
	//		*it = 10;
	//	cout <<*it<< endl;
	//	++it;
	//}
 	List<int> l;
	l.PushBack(1);
	l.PushBack(2);
	l.PushBack(3);
	l.PushBack(4);

	List<int>::ConstIterator it = l.Begin();

	//while (it != l.End())
	//{
	//	if (*it == 2)
	//	{
	//		*it= 10;
	//	}
	//	++it;
	//}
	//while (it != l.End())
	//{
	//	if(it->_data%2== 0)
	//	{
	//		 l.Erase(it);
	//	}
	//	it++;	
	//}

	it = l.Begin();
	while (it != l.End())
	{
		cout <<*it << endl;
		it++;
	}
		

	return 0;
}